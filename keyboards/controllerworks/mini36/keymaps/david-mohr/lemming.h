/*
Copyright 2019 @foostan
Copyright 2020 Drashna Jaelre <@drashna>
Copyright 2023 David Falkner <falkner@martica.org>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifdef OLED_ENABLE

// All bitmaps below were converted from PNG to CPP code below using: https://javl.github.io/image2cpp/
// (Make sure to select draw mode "Vertical - 1 bit per pixel".)

#define SMALL_ICON_DIM 16
#define SMALL_ICON_SIZE 32
#define LARGE_ICON_SIZE 128
#define SHOW_GRAPHICS

#define RGB_INDEX_E 17
#define RGB_INDEX_S 19
#define RGB_INDEX_D 16
#define RGB_INDEX_F 11
#define RGB_INDEX_MINS 51

#ifdef SHOW_GRAPHICS

typedef enum {
    CYCLE,
    SINGLE
} anim_style_t;

typedef enum {
    STOPPED,
    PLAYING,
    COMPLETED
} anim_state_t;

typedef struct {
    int startframe;
    int stopframe;
    anim_style_t style;
} animation_t;

typedef struct {
    int originx;
    int originy;
} frame_t;

typedef struct {
    const char *bitmaps;
    const animation_t *anims;
    const frame_t *frames;
    int framesize;
    int numframes;
    int curframe;
    int numanims;
    int curanim;
    int width;
    int height;
} sprite_t;

#define LEMMING_FRAME_WIDTH 20
#define LEMMING_FRAME_HEIGHT 32
#define LEMMING_FRAME_NUM 42

// "animation-lemming", 20x32px, 42 frames, 80 bytes/frame
static const char bitmaps_lemming [] PROGMEM = {
    // Frame 0:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0xc0,  0xc0,  0xc0,  0xc0,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x06,  0x0f,  0x1f,  0xff,  0xff,  0xff,  0xff,  0x9d,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x60,  0x70,  0xff,  0xff,  0xff,  0xff,  0x7f,  0x3e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 1:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xe0,  0xe0,  0x80,  0xc0,  0x60,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0x07,  0xcf,  0xff,  0xff,  0xff,  0xff,  0x1c,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xe7,  0xf7,  0xff,  0xff,  0x3f,  0x1f,  0x7f,  0x78,  0x3e,  0x1e,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 2:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x00,  0x00,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x9f,  0xfe,  0xff,  0xff,  0xff,  0x70,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x98,  0x98,  0xfe,  0xff,  0x7f,  0x7f,  0x7f,  0xff,  0xfe,  0xf8,  0xe0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  
    // Frame 3:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x1f,  0xff,  0xff,  0xff,  0xff,  0x1f,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0xe0,  0xe0,  0x66,  0x77,  0x7f,  0xff,  0xff,  0xff,  0xff,  0xfc,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x02,  0x00,  0x00,  0x01,  0x03,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 4:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x3f,  0xff,  0xff,  0xff,  0xff,  0x1d,  0x19,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x60,  0x74,  0xff,  0xff,  0xff,  0xff,  0x7f,  0x3c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 5:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xe0,  0xe0,  0x80,  0xc0,  0x60,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0xff,  0xff,  0xff,  0xff,  0x1c,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xf0,  0xfc,  0xff,  0xff,  0x3f,  0x1f,  0x7f,  0x7c,  0x3e,  0x1e,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 6:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0e,  0x3f,  0xfc,  0xfe,  0xff,  0xff,  0xe0,  0xc0,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0xc0,  0xc0,  0xff,  0xff,  0xff,  0xff,  0xfc,  0xf8,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0x03,  0x03,  0x03,  0x02,  0x00,  0x00,  0x02,  0x03,  0x03,  0x03,  0x03,  0x01,  0x00,  0x00,  
    // Frame 7:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x3f,  0xff,  0xff,  0xff,  0xff,  0x9f,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0xc0,  0xe0,  0x60,  0x60,  0x7f,  0xff,  0xff,  0xff,  0xff,  0xf8,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x02,  0x00,  0x00,  0x01,  0x03,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 8:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0xc0,  0xc0,  0xc0,  0xc0,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x06,  0x0f,  0x1f,  0xff,  0xff,  0xff,  0xff,  0x9d,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x60,  0x70,  0xff,  0xff,  0xff,  0xff,  0x7f,  0x3e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 9:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xe0,  0xe0,  0x80,  0xc0,  0x60,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0x07,  0xcf,  0xff,  0xff,  0xff,  0xff,  0x1c,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xe7,  0xf7,  0xff,  0xff,  0x3f,  0x1f,  0x7f,  0x78,  0x3e,  0x1e,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 10:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x00,  0x00,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x9f,  0xfe,  0xff,  0xff,  0xff,  0x70,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x98,  0x98,  0xfe,  0xff,  0x7f,  0x7f,  0x7f,  0xff,  0xfe,  0xf8,  0xe0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  
    // Frame 11:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x1f,  0xff,  0xff,  0xff,  0xff,  0x1f,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0xe0,  0xe0,  0x66,  0x77,  0x7f,  0xff,  0xff,  0xff,  0xff,  0xfc,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x02,  0x00,  0x00,  0x01,  0x03,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 12:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x3f,  0xff,  0xff,  0xff,  0xff,  0x1d,  0x19,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x60,  0x74,  0xff,  0xff,  0xff,  0xff,  0x7f,  0x3c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 13:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xe0,  0xe0,  0x80,  0xc0,  0x60,  0x60,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0xff,  0xff,  0xff,  0xff,  0x1c,  0x18,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xf0,  0xfc,  0xff,  0xff,  0x3f,  0x1f,  0x7f,  0x7c,  0x3e,  0x1e,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 14:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0e,  0x3f,  0xfc,  0xfe,  0xff,  0xff,  0xe0,  0xc0,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0xc0,  0xc0,  0xff,  0xff,  0xff,  0xff,  0xfc,  0xf8,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0x03,  0x03,  0x03,  0x02,  0x00,  0x00,  0x02,  0x03,  0x03,  0x03,  0x03,  0x01,  0x00,  0x00,  
    // Frame 15:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x3f,  0xff,  0xff,  0xff,  0xff,  0x9f,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0xc0,  0xe0,  0x60,  0x60,  0x7f,  0xff,  0xff,  0xff,  0xff,  0xf8,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x02,  0x00,  0x00,  0x01,  0x03,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 16:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0xc0,  0xc0,  0xc0,  0xc0,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x06,  0x0f,  0x1f,  0xff,  0xff,  0xff,  0xff,  0x9d,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x60,  0x70,  0xff,  0xff,  0xff,  0xff,  0x7f,  0x3e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 17:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x06,  0x0e,  0xfe,  0xfe,  0xde,  0xbf,  0xff,  0xff,  0xff,  0xff,  0x9d,  0xd8,  0x60,  0x60,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x7f,  0x7f,  0xe0,  0xf9,  0xff,  0xff,  0x7f,  0x7f,  0x7d,  0x78,  0x38,  0x18,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 18:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x1f,  0xff,  0xff,  0xff,  0xff,  0xee,  0xec,  0x30,  0x30,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x30,  0x70,  0xe0,  0xfc,  0xff,  0xff,  0x7f,  0x3f,  0x3f,  0x3f,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 19:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x3f,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xfe,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xf0,  0xfc,  0xff,  0xff,  0xff,  0x7f,  0x79,  0x61,  0x21,  0x01,  0x01,  0x03,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 20:
    0x00,  0x80,  0xe0,  0xe0,  0xf0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xc0,  0x80,  0x00,  0x00,  
    0x00,  0x01,  0x01,  0x01,  0x01,  0x03,  0x07,  0x07,  0x87,  0xc7,  0xff,  0xff,  0x07,  0x07,  0x07,  0x07,  0x07,  0x07,  0x07,  0x06,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xff,  0xff,  0xff,  0xff,  0xe7,  0x36,  0x38,  0x18,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x7c,  0xff,  0xff,  0x7f,  0x1f,  0x1f,  0x1f,  0x1e,  0x0e,  0x06,  0x00,  0x00,  0x00,  0x00,  
    // Frame 21:
    0x40,  0x60,  0x70,  0x78,  0x78,  0x78,  0x7c,  0x7e,  0x7e,  0xfe,  0xfe,  0x7e,  0x7e,  0x7c,  0x78,  0x78,  0x78,  0x70,  0x60,  0x40,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x18,  0xff,  0xff,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xe0,  0x80,  0x80,  0x00,  
    0x00,  0x00,  0x00,  0xf0,  0xe0,  0xc0,  0xe0,  0xe0,  0xf0,  0xff,  0xff,  0xff,  0xff,  0xef,  0xcf,  0x0f,  0x0f,  0x1f,  0x07,  0x00,  
    0x00,  0x00,  0x00,  0x01,  0x03,  0x07,  0x0f,  0x3f,  0xff,  0xff,  0x8f,  0x03,  0x01,  0x03,  0x07,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 22:
    0x80,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf8,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xf8,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0x80,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x30,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xe0,  0xc0,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0x80,  0xc7,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x37,  0x63,  0xc0,  0xc1,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0x0f,  0x0f,  0x3f,  0x3f,  0x7f,  0xff,  0xff,  0xf0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    // Frame 23:
    0x00,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xe0,  0xe0,  0xc0,  0x80,  0x00,  
    0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x31,  0x61,  0xff,  0xff,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0x91,  0x01,  0x01,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0xc3,  0xf7,  0xff,  0xff,  0xff,  0xff,  0x1b,  0x33,  0x63,  0x60,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x3c,  0x7e,  0x7f,  0x7f,  0x3f,  0x7f,  0xff,  0xff,  0xe7,  0xe0,  0x60,  0x00,  0x00,  0x00,  
    // Frame 24:
    0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  
    0x02,  0x03,  0x03,  0x03,  0x03,  0x03,  0x03,  0x63,  0xc3,  0xff,  0xff,  0xf3,  0xf3,  0xf3,  0xe3,  0x43,  0x03,  0x03,  0x03,  0x02,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0xff,  0xff,  0xff,  0xff,  0xcf,  0x0f,  0x0e,  0x0c,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0xe0,  0xfc,  0xff,  0xff,  0xbf,  0x3f,  0x3f,  0x7e,  0x3c,  0x1e,  0x00,  0x00,  0x00,  
    // Frame 25:
    0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  
    0x02,  0x03,  0x03,  0x03,  0x03,  0x03,  0x03,  0x63,  0xc3,  0xff,  0xff,  0xf3,  0xf3,  0xf3,  0xe3,  0x43,  0x03,  0x03,  0x03,  0x02,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0xff,  0xff,  0xff,  0xff,  0xcf,  0x0f,  0x0e,  0x0c,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0xe0,  0xfc,  0xff,  0xff,  0xbf,  0x3f,  0x3f,  0x7e,  0x3c,  0x1e,  0x00,  0x00,  0x00,  
    // Frame 26:
    0x00,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xe0,  0xe0,  0xc0,  0x80,  0x00,  
    0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x31,  0x61,  0xff,  0xff,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0x91,  0x01,  0x01,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0xc3,  0xf7,  0xff,  0xff,  0xff,  0xff,  0x1b,  0x33,  0x63,  0x60,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x3c,  0x7e,  0x7f,  0x7f,  0x3f,  0x7f,  0xff,  0xff,  0xe7,  0xe0,  0x60,  0x00,  0x00,  0x00,  
    // Frame 27:
    0x80,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf8,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xf8,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0x80,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x30,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xe0,  0xc0,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0x80,  0xc7,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x37,  0x63,  0xc0,  0xc1,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0x0f,  0x0f,  0x3f,  0x3f,  0x7f,  0xff,  0xff,  0xf0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    // Frame 28:
    0x40,  0x60,  0x70,  0x78,  0x78,  0x78,  0x7c,  0x7e,  0x7e,  0xfe,  0xfe,  0x7e,  0x7e,  0x7c,  0x78,  0x78,  0x78,  0x70,  0x60,  0x40,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x18,  0xff,  0xff,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xe0,  0x80,  0x80,  0x00,  
    0x00,  0x00,  0x00,  0xf0,  0xe0,  0xc0,  0xe0,  0xe0,  0xf0,  0xff,  0xff,  0xff,  0xff,  0xef,  0xcf,  0x0f,  0x0f,  0x1f,  0x07,  0x00,  
    0x00,  0x00,  0x00,  0x01,  0x03,  0x07,  0x0f,  0x3f,  0xff,  0xff,  0x8f,  0x03,  0x01,  0x03,  0x07,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 29:
    0x40,  0x60,  0x70,  0x78,  0x78,  0x78,  0x7c,  0x7e,  0x7e,  0xfe,  0xfe,  0x7e,  0x7e,  0x7c,  0x78,  0x78,  0x78,  0x70,  0x60,  0x40,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x18,  0xff,  0xff,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xe0,  0x80,  0x80,  0x00,  
    0x00,  0x00,  0x00,  0xf0,  0xe0,  0xc0,  0xe0,  0xe0,  0xf0,  0xff,  0xff,  0xff,  0xff,  0xef,  0xcf,  0x0f,  0x0f,  0x1f,  0x07,  0x00,  
    0x00,  0x00,  0x00,  0x01,  0x03,  0x07,  0x0f,  0x3f,  0xff,  0xff,  0x8f,  0x03,  0x01,  0x03,  0x07,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 30:
    0x80,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf8,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xf8,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0x80,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x30,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xe0,  0xc0,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0x80,  0xc7,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x37,  0x63,  0xc0,  0xc1,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0x0f,  0x0f,  0x3f,  0x3f,  0x7f,  0xff,  0xff,  0xf0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    // Frame 31:
    0x00,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xe0,  0xe0,  0xc0,  0x80,  0x00,  
    0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x31,  0x61,  0xff,  0xff,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0x91,  0x01,  0x01,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0xc3,  0xf7,  0xff,  0xff,  0xff,  0xff,  0x1b,  0x33,  0x63,  0x60,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x3c,  0x7e,  0x7f,  0x7f,  0x3f,  0x7f,  0xff,  0xff,  0xe7,  0xe0,  0x60,  0x00,  0x00,  0x00,  
    // Frame 32:
    0x00,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xe0,  0xe0,  0xc0,  0x80,  0x00,  
    0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x31,  0x61,  0xff,  0xff,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0x91,  0x01,  0x01,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0xc3,  0xf7,  0xff,  0xff,  0xff,  0xff,  0x1b,  0x33,  0x63,  0x60,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x3c,  0x7e,  0x7f,  0x7f,  0x3f,  0x7f,  0xff,  0xff,  0xe7,  0xe0,  0x60,  0x00,  0x00,  0x00,  
    // Frame 33:
    0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  
    0x02,  0x03,  0x03,  0x03,  0x03,  0x03,  0x03,  0x63,  0xc3,  0xff,  0xff,  0xf3,  0xf3,  0xf3,  0xe3,  0x43,  0x03,  0x03,  0x03,  0x02,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0xff,  0xff,  0xff,  0xff,  0xcf,  0x0f,  0x0e,  0x0c,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0xe0,  0xfc,  0xff,  0xff,  0xbf,  0x3f,  0x3f,  0x7e,  0x3c,  0x1e,  0x00,  0x00,  0x00,  
    // Frame 34:
    0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  
    0x02,  0x03,  0x03,  0x03,  0x03,  0x03,  0x03,  0x63,  0xc3,  0xff,  0xff,  0xf3,  0xf3,  0xf3,  0xe3,  0x43,  0x03,  0x03,  0x03,  0x02,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x03,  0xff,  0xff,  0xff,  0xff,  0xcf,  0x0f,  0x0e,  0x0c,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0xe0,  0xfc,  0xff,  0xff,  0xbf,  0x3f,  0x3f,  0x7e,  0x3c,  0x1e,  0x00,  0x00,  0x00,  
    // Frame 35:
    0x00,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xe0,  0xe0,  0xc0,  0x80,  0x00,  
    0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x31,  0x61,  0xff,  0xff,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0xf9,  0x91,  0x01,  0x01,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0xc3,  0xf7,  0xff,  0xff,  0xff,  0xff,  0x1b,  0x33,  0x63,  0x60,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x3c,  0x7e,  0x7f,  0x7f,  0x3f,  0x7f,  0xff,  0xff,  0xe7,  0xe0,  0x60,  0x00,  0x00,  0x00,  
    // Frame 36:
    0x80,  0xc0,  0xe0,  0xf0,  0xf0,  0xf0,  0xf8,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xfc,  0xf8,  0xf0,  0xf0,  0xf0,  0xe0,  0xc0,  0x80,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x30,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  0xf0,  0xf0,  0xe0,  0xe0,  0xc0,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x00,  0x80,  0xc7,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x37,  0x63,  0xc0,  0xc1,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x0f,  0x0f,  0x0f,  0x3f,  0x3f,  0x7f,  0xff,  0xff,  0xf0,  0x80,  0x00,  0x00,  0x00,  0x00,  
    // Frame 37:
    0x40,  0x60,  0x70,  0x78,  0x78,  0x78,  0x7c,  0x7e,  0x7e,  0xfe,  0xfe,  0x7e,  0x7e,  0x7c,  0x78,  0x78,  0x78,  0x70,  0x60,  0x40,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x18,  0xff,  0xff,  0x80,  0xc0,  0xe0,  0xe0,  0xe0,  0xe0,  0x80,  0x80,  0x00,  
    0x00,  0x00,  0x00,  0xf0,  0xe0,  0xc0,  0xe0,  0xe0,  0xf0,  0xff,  0xff,  0xff,  0xff,  0xef,  0xcf,  0x0f,  0x0f,  0x1f,  0x07,  0x00,  
    0x00,  0x00,  0x00,  0x01,  0x03,  0x07,  0x0f,  0x3f,  0xff,  0xff,  0x8f,  0x03,  0x01,  0x03,  0x07,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 38:
    0x00,  0x80,  0xe0,  0xe0,  0xf0,  0xf0,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf8,  0xf0,  0xe0,  0xc0,  0x80,  0x00,  0x00,  
    0x00,  0x01,  0x01,  0x01,  0x01,  0x03,  0x07,  0x07,  0x87,  0xc7,  0xff,  0xff,  0x07,  0x07,  0x07,  0x07,  0x07,  0x07,  0x07,  0x06,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xff,  0xff,  0xff,  0xff,  0xe7,  0x36,  0x38,  0x18,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x7c,  0xff,  0xff,  0x7f,  0x1f,  0x1f,  0x1f,  0x1e,  0x0e,  0x06,  0x00,  0x00,  0x00,  0x00,  
    // Frame 39:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x3f,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xfe,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xf0,  0xfc,  0xff,  0xff,  0xff,  0x7f,  0x79,  0x61,  0x21,  0x01,  0x01,  0x03,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 40:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0xc0,  0xc0,  0xc0,  0xc0,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0f,  0x1f,  0xff,  0xff,  0xff,  0xff,  0xee,  0xec,  0x30,  0x30,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x30,  0x70,  0xe0,  0xfc,  0xff,  0xff,  0x7f,  0x3f,  0x3f,  0x3f,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    // Frame 41:
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x80,  0x80,  0x80,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x06,  0x0e,  0xfe,  0xfe,  0xde,  0xbf,  0xff,  0xff,  0xff,  0xff,  0x9d,  0xd8,  0x60,  0x60,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x7f,  0x7f,  0xe0,  0xf9,  0xff,  0xff,  0x7f,  0x7f,  0x7d,  0x78,  0x38,  0x18,  0x00,  0x00,  0x00,  
    0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00 
};

static const frame_t frames_lemming[LEMMING_FRAME_NUM] = {
    { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 },
    { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 },
    { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 }, { 11, 24 },
    { 11, 24 }, { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 },
    { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 },
    { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 },
    { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 },
    { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 }, { 11, 30 },
    { 11, 30 }, { 11, 30 }
};

#define LEMMING_ANIM_NUM 4
#define LEMMING_ANIM_WALK 0
#define LEMMING_ANIM_WALK2FALL 1
#define LEMMING_ANIM_FALL 2
#define LEMMING_ANIM_FALL2WALK 3

static const animation_t anims_lemming[LEMMING_ANIM_NUM] = {
    { 0, 16, CYCLE },
    { 16, 21, SINGLE },
    { 21, 38, CYCLE },
    { 38, 42, SINGLE }
};

static void oled_write_bitmap( int x, int y, const char *bitmap, int width, int height, bool enabled ) {
    int16_t display_width = is_keyboard_master() ? OLED_DISPLAY_HEIGHT : OLED_DISPLAY_WIDTH;
    int16_t display_height = is_keyboard_master() ? OLED_DISPLAY_WIDTH : OLED_DISPLAY_HEIGHT;
    // oled_buffer_reader_t reader = oled_read_raw( 0 );

    if( (-width < x) && (x < display_width) && (-height < y) && (y < display_height) ) {
        int16_t yshift = y % 8;
        if( yshift < 0 ) {
            y -= yshift + 8;
            yshift += 8;
        }

        int16_t sprite_height = height >> 3;
        int16_t xstart = x >= 0 ? 0 : -x;
        int16_t xstop = (x + width <= display_width) ? width : (display_width - x);
        int16_t ystart = y >= 0 ? 0 : (-y >> 3);
        int16_t ystop = ((y >> 3) + sprite_height <= (display_height >> 3)) ?
            sprite_height : ((display_height - y) >> 3);

        if( yshift > 0 ) {
            ystop++;
        }

        int16_t sprite_pos = ystart * width;
        int16_t frame_pos = x + ((y >> 3) + ystart) * display_width;
        uint8_t byte;

        for( int16_t sy = ystart; sy < ystop; sy++ ) {
            sprite_pos += xstart;
            frame_pos += xstart;
            for( int16_t sx = xstart; sx < xstop; sx++ ) {
                if( !enabled ) {
                    byte = 0x00;
                } else if( yshift > 0 ) {
                    byte = (sy > 0) ? pgm_read_byte( bitmap + sprite_pos - width ) >> (8 - yshift) : 0;
                    if( sy < sprite_height ) {
                        byte |= pgm_read_byte( bitmap + sprite_pos ) << yshift;
                    }  
                } else {
                    byte = pgm_read_byte( bitmap + sprite_pos );
                }

                oled_write_raw_byte( byte, frame_pos );
                sprite_pos++;
                frame_pos++;
            }
            sprite_pos += width - xstop;
            frame_pos += display_width - xstop;
        }
    }
}

static void oled_sprite_init( sprite_t *sprite, const char *bitmaps, const frame_t *frames, int width, int height, int numframes ) {
    sprite->bitmaps = bitmaps;
    sprite->width = width;
    sprite->height = height;
    sprite->numframes = numframes;
    sprite->framesize = width * height / 8;
    sprite->curframe = 0;
    sprite->anims = NULL;
    sprite->numanims = 0;
    sprite->curanim = -1;
    sprite->frames = frames;
}

static void oled_sprite_init_anims( sprite_t *sprite, const animation_t *anims, int numanims ) {
    sprite->anims = anims;
    sprite->numanims = numanims;
}

static void oled_sprite_play_anim( sprite_t *sprite, int anim ) {
    if( 0 <= anim && anim <= sprite->numanims ) {
        sprite->curanim = anim;
        sprite->curframe = sprite->anims[anim].startframe;
    }
}

static anim_state_t oled_sprite_get_anim_state( sprite_t *sprite, int anim ) {
    anim_state_t state = STOPPED;

    if( sprite->curanim == anim ) {
        const animation_t *anim = &sprite->anims[sprite->curanim];
        if( anim->style == SINGLE && sprite->curframe == anim->stopframe - 1 ) {
            state = COMPLETED;
        } else {
            state = PLAYING;
        }
    }

    return state;
}

static void oled_sprite_update( int x, int y, sprite_t *sprite, bool enabled ) {
    if( sprite->frames != NULL ) {
        const frame_t *frame = &sprite->frames[sprite->curframe];
        x -= frame->originx;
        y -= frame->originy;
    }

    oled_write_bitmap( x, y, sprite->bitmaps + sprite->curframe * sprite->framesize,
        sprite->width, sprite->height, enabled );

    if( enabled && sprite->curanim >= 0 ) {
        const animation_t *anim = &sprite->anims[sprite->curanim];
        sprite->curframe++;
        if( sprite->curframe >= anim->stopframe ) {
            if( anim->style == CYCLE ) {
                sprite->curframe = anim->startframe;
            } else {
                sprite->curframe = anim->stopframe - 1;
            }
        }
    }
}

static void oled_animate_lemmings( void ) {
    static int x = LEMMING_FRAME_WIDTH / 2;
    static int y = -LEMMING_FRAME_HEIGHT;
    static sprite_t sprite_lemming;
    static bool init = false;

    if( !init ) {
        oled_sprite_init( &sprite_lemming, bitmaps_lemming, frames_lemming, LEMMING_FRAME_WIDTH, LEMMING_FRAME_HEIGHT, LEMMING_FRAME_NUM );
        oled_sprite_init_anims( &sprite_lemming, anims_lemming, LEMMING_ANIM_NUM );
        oled_sprite_play_anim( &sprite_lemming, LEMMING_ANIM_FALL );
        init = true;
    }
    
    oled_sprite_update(x, y, &sprite_lemming, false);
    if( y < 128 ) {
        y += 3;
    } else if( x == LEMMING_FRAME_WIDTH / 2 ) {
        if( oled_sprite_get_anim_state( &sprite_lemming, LEMMING_ANIM_FALL ) == PLAYING ) {
            y = 128;
            oled_sprite_play_anim( &sprite_lemming, LEMMING_ANIM_FALL2WALK );
        } else if( oled_sprite_get_anim_state( &sprite_lemming, LEMMING_ANIM_FALL2WALK ) == COMPLETED ) {
            oled_sprite_play_anim( &sprite_lemming, LEMMING_ANIM_WALK );
            x++;
        }
    } else if( x < 32 + LEMMING_FRAME_WIDTH / 2 && oled_sprite_get_anim_state( &sprite_lemming, LEMMING_ANIM_WALK ) == PLAYING ) {
        x++;
    } else {
        x = LEMMING_FRAME_WIDTH / 2;
        y = -LEMMING_FRAME_HEIGHT;
        oled_sprite_play_anim( &sprite_lemming, LEMMING_ANIM_FALL );
    }
    oled_sprite_update(x, y, &sprite_lemming, true);
}

#endif // SHOW_GRAPHICS

void render_bootmagic_status(bool status) {
    /* Show Ctrl-Gui Swap options */
    static const char PROGMEM logo[][2][3] = {
        {{0x97, 0x98, 0}, {0xb7, 0xb8, 0}},
        {{0x95, 0x96, 0}, {0xb5, 0xb6, 0}},
    };
    if (status) {
        oled_write_ln_P(logo[0][0], false);
        oled_write_ln_P(logo[0][1], false);
    } else {
        oled_write_ln_P(logo[1][0], false);
        oled_write_ln_P(logo[1][1], false);
    }
}

/*
oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    if (!is_keyboard_master()) {
        return OLED_ROTATION_0;
    }
#ifdef SHOW_GRAPHICS
    return OLED_ROTATION_90;
#else
    return OLED_ROTATION_180; // flips the display 180 degrees if offhand
#endif
}
*/

#endif // OLED_ENABLE
